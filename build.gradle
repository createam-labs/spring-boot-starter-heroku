buildscript {
  ext {
    kotlinVersion = '1.2.0'
    springBootVersion = '1.5.9.RELEASE'
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
    classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
  }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: "jacoco"

group = 'io.github.createam-labs'
archivesBaseName = "spring-boot-starter-heroku"
version = '0.1.2'
sourceCompatibility = 1.8

compileKotlin {
  kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
  kotlinOptions.jvmTarget = "1.8"
}

repositories {
  mavenCentral()
}

bootRepackage {
  enabled = false
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java
      groupId "$group"
      version "$version"
      artifactId "$archivesBaseName"
    }
  }
}

jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled false
  }
  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: 'com/createam/heroku/autoconfiguration')
    })
  }
}

task writeNewPom << {
  pom {
    project {
      groupId 'org.example'
      artifactId 'test'
      version '1.0.0'

      inceptionYear '2008'
      licenses {
        license {
          name 'The Apache Software License, Version 2.0'
          url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          distribution 'repo'
        }
      }
    }
  }.writeTo("$buildDir/newpom.xml")
}


check.dependsOn jacocoTestReport

dependencies {
  compile('org.springframework.boot:spring-boot-starter-thymeleaf')
  compile('org.springframework.boot:spring-boot-starter-web')
  compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
  compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
  testCompile('org.springframework.boot:spring-boot-starter-test')
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar, sourcesJar
}
